///////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды ParseIB
//
// Переработка для перехода на гит в связке с конфигуратором
// без едт
// ОБщая идея - без хранилища работаем в локальной копии
// запускаем команду гит синка parseIB 
//   [путь к лок базе] - [путь к репозиторию]
// выгрузка в файлы ст. средствами, все двоичные формы раскадываются рядом, но не удаляются
// тексты храним для истории гита, правки черех конфигуратор
// стандартная выгрузка
//
///////////////////////////////////////////////////////////////////
#Использовать fs

Перем ВерсияПлатформы Экспорт;
Перем Лог;
Перем УдалятьВременныеФайлы;

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Выполнить разбор конфигурации");
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКЛокальнойБазе", "Файловый путь к информационной базе 1С.");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ЛокальныйКаталогГит", "Каталог исходников внутри локальной копии git-репозитария.");

	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-email", "<домен почты для пользователей git>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-v8version", "<Маска версии платформы (8.3, 8.3.5, 8.3.6.2299 и т.п.)>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-debug", "<on|off>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-verbose", "<on|off>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-format", "<hierarchical|plain>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-minversion", "<номер минимальной версии для выгрузки>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-maxversion", "<номер максимальной версии для выгрузки>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-limit", "<выгрузить неболее limit версий от текущей выгруженной>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-tempdir", "<Путь к каталогу временных файлов>");
	//Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-process-fatform-modules", "Переименовывать модули обычных форм в Module.bsl");
	//Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-check-authors", "Проверка файла AUTHORS, на наличие всех авторов коммитов ");

	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-amount-look-for-license", "<число> количество повторов получения лицензии (попытка подключения каждые 10 сек), 0 - без ограничений");
	//Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-stop-if-empty-comment", "Остановить, если Комментарий к версии пустой");
	//Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-auto-set-tags", "Автоматическая установка тэгов по версия конфиграции");
	//Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-increment", "Частичная выгрузка конфигурации");

	//Парсер.ДобавитьПараметрФлагКоманды		 (ОписаниеКоманды, "-useVendorUnload", "Получение версии хранилища средствами tool1cd или типовыми средствами платформы>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-user", "<пользователь хранилища конфигурации>");
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-pwd", "<пароль пользователя хранилища конфигурации>");	

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду

Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры) Экспорт

	ЛокальныйКаталогГит = ПараметрыКоманды["ЛокальныйКаталогГит"];
	

	Если ЛокальныйКаталогГит = Неопределено Тогда

		ЛокальныйКаталогГит = ТекущийКаталог();

	КонецЕсли;
	
	ЛокальныйКаталогБазы = ПараметрыКоманды["ПутьКЛокальнойБазе"];
	
	
	//Распаковщик = РаспаковщикКонфигурации.ПолучитьИНастроитьРаспаковщик(ПараметрыКоманды, ДополнительныеПараметры);
	//Распаковщик.ВерсияПлатформы				= ПараметрыКоманды["-v8version"];
	//Распаковщик.ДоменПочтыДляGitПоУмолчанию	= ПараметрыКоманды["-email"];
	//Распаковщик.ПереименовыватьФайлМодуляОбычнойФормы = ПереименовыватьФайлМодуляОбычнойФормы;
	//Распаковщик.ТолькоИзменения = ВыгружатьТолькоИзменения;

	//Если НеИспользоватьTool1CD Тогда
		
	//		ПараметрыДоступаКХранилищу = Новый Структура("ПользовательХранилища, ПарольХранилища", ПараметрыКоманды["--storage-user"], ПараметрыКоманды["--storage-pwd"]);
	//		Распаковщик.ПроверитьПараметрыДоступаКХранилищу(ПараметрыДоступаКХранилищу);
	//		Распаковщик.ИспользоватьTool1CD = Не НеИспользоватьTool1CD;
			
	//КонецЕсли;
	

	ДополнительныеПараметры.Лог.Информация("Начинаю выгрузку исходников");
	
	Сообщить("Старт распаковки "+ТекущаяДата());	
	
	УдалятьВременныеФайлы = Ложь;
	ТолькоИзменения = Ложь;

	ПереименовыватьФайлМодуляОбычнойФормы = Истина;
	ПутьКВременномуКаталогу = "";

	СформироватьФайлКонфигурацииДляВыгрузки(ЛокальныйКаталогБазы, ЛокальныйКаталогГит);
	
	МассивФайлов = НайтиФайлы(ЛокальныйКаталогГит, "*.bin", Истина);

	Для каждого Файл из МассивФайлов Цикл
		Если Нрег(Файл.Имя) = "form.bin" Тогда
			КаталогФормы = ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения);
			СоздатьКаталог(КаталогФормы);
			ФС.ОбеспечитьПустойКаталог(КаталогФормы);
			Сообщить(КаталогФормы);
			РаспаковатьКонтейнерМетаданных(Файл.ПолноеИмя, КаталогФормы);
		КонецЕсли;
	КонецЦикла;
	
	Сообщить("Завершение распаковки "+ТекущаяДата());


	ДополнительныеПараметры.Лог.Информация("Выгрузка завершена");

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

КонецФункции // ВыполнитьКоманду

Процедура СформироватьФайлКонфигурацииДляВыгрузки(ЛокальныйКаталогБазы, ЛокальныйКаталогГит)
	Конфигуратор = ПолучитьМенеджерКонфигуратора();
	
	Если ВерсияПлатформы <> Неопределено Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	Иначе
		Конфигуратор.ИспользоватьВерсиюПлатформы("8.3");
	КонецЕсли;

	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	//ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());
	КаталогВыгрузкиФайловКонфигурации = ЛокальныйКаталогГит+ "\src";

	Попытка
		
		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		
		ПараметрыЗапуска.Добавить("/DumpConfigToFiles """+ЛокальныйКаталогГит+"""");		
		ПараметрыЗапуска.Добавить("/F """+ЛокальныйКаталогБазы+"""");		

		ВыполнитьКомандуКонфигуратора(Конфигуратор, ПараметрыЗапуска, Ложь);

	Исключение
		
		ТекстОшибки = Конфигуратор.ВыводКоманды();
		ВызватьИсключение ОписаниеОшибки();

	КонецПопытки;

КонецПроцедуры //СформироватьФайлКонфигурацииДляВыгрузки

Процедура РаспаковатьКонтейнерМетаданных(Знач ФайлРаспаковки, Знач КаталогРаспаковки, Знач Переименования = "", Знач КорневойКаталог = "")

	dllРаспаковать(ФайлРаспаковки, КаталогРаспаковки);
	ВыполнитьСборкуМусора(); // см. камент к процедуре dllРаспаковать
	ПереименовыватьФайлМодуляОбычнойФормы = Истина;
	Если ПереименовыватьФайлМодуляОбычнойФормы Тогда

		Для Каждого ФайлМодуля Из НайтиФайлы(КаталогРаспаковки, "module", Истина) Цикл

			СтароеИмяФайла = ФайлМодуля.ПолноеИмя;
			НовоеИмяФайла = ОбъединитьПути(ФайлМодуля.Путь, "Module.bsl");
			
			ПереместитьФайл(СтароеИмяФайла, НовоеИмяФайла);

			Если НЕ ПустаяСтрока(Переименования) Тогда
				Если ПустаяСтрока(КорневойКаталог) Тогда
					ВызватьИсключение 
						"РаспаковатьКонтейнерМетаданных при заполненном Переименования ожидали и не пустое КорневойКаталог";
				КонецЕсли;
				ДобавитьПереименование(Переименования,
				СтрЗаменить(СтароеИмяФайла, КорневойКаталог, ""),
				СтрЗаменить(НовоеИмяФайла, КорневойКаталог, ""));
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура dllРаспаковать(Знач ФайлРаспаковки, Знач КаталогРаспаковки)
		
	Распаковщик = Новый ЧтениеФайла8(ФайлРаспаковки);
	Распаковщик.ИзвлечьВсе(КаталогРаспаковки, Истина);
	ОсвободитьОбъект(Распаковщик); // почему-то этого недостаточно. Вопрос к реализации компоненты.
	Распаковщик = Неопределено;
	
КонецПроцедуры

Функция ПолучитьМенеджерКонфигуратора()
	Конфигуратор = Новый УправлениеКонфигуратором;
	//Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	КаталогСборки = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогСборки);
	Возврат Конфигуратор;
КонецФункции

Процедура ВыполнитьКомандуКонфигуратора(Знач Конфигуратор, Знач ПараметрыЗапуска, Знач УдалитьВременныеФайлы = Истина)

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение

		ОписаниеОшибки = ОписаниеОшибки();
		
		УдалитьВременныеФайлыПриНеобходимости(Конфигуратор.КаталогСборки());
		ВызватьИсключение;
	КонецПопытки;

	Если УдалитьВременныеФайлы Тогда
		УдалитьВременныеФайлыПриНеобходимости(Конфигуратор.КаталогСборки());
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьВременныеФайлыПриНеобходимости(Знач ПутьКФайлу = "") Экспорт

	Если НЕ УдалятьВременныеФайлы Тогда
		Возврат;
	КонецЕсли;

	Если ПутьКФайлу = "" Тогда
		ВременныеФайлы.Удалить();
	Иначе
		ВременныеФайлы.УдалитьФайл(ПутьКФайлу);
	КонецЕсли;

КонецПроцедуры

Функция ДобавитьПереименование(Знач Переименования, Знач Источник, Знач Приемник)

	СтрокаПереименования = Переименования.Добавить();
	СтрокаПереименования.Источник = Источник;
	СтрокаПереименования.Приемник = Приемник;

	Возврат СтрокаПереименования;

КонецФункции